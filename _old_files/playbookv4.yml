---

- hosts: all
  gather_facts: no

  vars:
    jsondata: "{{ lookup('file','sample_topo.json')|from_json }}"
    jsonmetadata: "{{ lookup('file','sample_metadata.json')|from_json }}"
    project_name: "test_proj_name"
    project_directory: "/Users/josesanchez/Qsync/OSI/NetworkCI/json_dict/project_folder"

  tasks:

      - name: Iterate Json -  Device
        set_fact:
          name_item: "{{item.Name}}"
          os_item:  "{{item.NodeType}}"
          id_item: "{{item.FakeID}}"
        loop: "{{jsondata.Routers}}"
        register: device_results

      - name: Create Fact List - Device
        set_fact:
          name: "{{ device_results.results | map(attribute='ansible_facts.name_item') | list }}"
          os: "{{ device_results.results | map(attribute='ansible_facts.os_item') | list }}"
          Did: "{{ device_results.results | map(attribute='ansible_facts.id_item') | list }}"

##      - name: Print Facts - Device
##        debug: var=name ###or whatever

      - name: Iterate Json -  Links
        set_fact:
          src_item: "{{item.Source}}"
          dest_item:  "{{item.Target}}"
          id_item: "{{item.FakeID}}"
        loop: "{{jsondata.Links}}"
        register: link_results

      - name: Create Fact List - Links
        set_fact:
          src: "{{ link_results.results | map(attribute='ansible_facts.src_item') | list }}"
          dest: "{{ link_results.results | map(attribute='ansible_facts.dest_item') | list }}"
          Lid: "{{ link_results.results | map(attribute='ansible_facts.id_item') | list }}"

##      - name: Print Facts - Device
##        debug: var=src ###or whatever

##////      - name: Create Fact List - Links
##////        copy: content={{name_item}} dest=/Users/josesanchez/Qsync/OSI/NetworkCI/json_dict/{{name_item}}.ini
##////        delegate_to: localhost
##////        loop: "{{jsondata.Routers}}"

      - name: Generate template for hosts.ini
        template: src=/Users/josesanchez/Qsync/OSI/NetworkCI/json_dict/hosts.j2 dest=/Users/josesanchez/Qsync/OSI/NetworkCI/json_dict/test_host.ini
        with_items: "{{name}}"
        delegate_to: localhost
    #  - name: copy content
      #  copy:
          #content="{{ src }}" dest=/output
##          content: |
##                  {% for item.key in groups.Routers %}
##                  [{{host.NodeType}}]
##                  {{host.hostname}}
##                  {% endfor %}
##
##          dest: dest=./Users/josesanchez/Qsync/OSI/NetworkCI/json_dict/file.ini
##        with_dict : "{{ lookup('dict','jsondata')|from_json }}"
##        loop: "{{ hostvars | dict2items }}"
#
#      - name: jinja lookup
#        template:
#          src: /Users/josesanchez/Qsync/OSI/NetworkCI/json_dict/hosts.j2
#          dest: /Users/josesanchez/Qsync/OSI/NetworkCI/json_dict/file.ini
#        loop:
#        with_items: "{{ (jsondata['Routers']) }}"

########  tasks:
########      - name: Verifying local directory
########        file:
########          path: ./devices/{{ group_names[0] }}/{{ inventory_hostname }}
########          state: directory
########
########      - name: Gathering backup config
########        ios_command:
########          commands: show run
########          provider: "{{ cli }}"
########        register: config
########
########      - name: Registering output
########        debug:
########          var=config
########
########      - name: Saving backup config
########        copy: content="{{ config.stdout[0] }}" dest=./devices/{{ group_names[0] }}/{{ inventory_hostname }}/{{ lookup('pipe', 'date +%Y%m%d%H') }}_{{ inventory_hostname }}.txt
########         #    content="{{ config.stdout[0] }}" dest=./backups/{{group_names}}/{{inventory_hostname}}/{{ lookup('pipe', 'date +%Y%m%d%H') }}_{{ inventory_hostname }}.txt
########

#      - name: debug var stuff
#        debug: var= deviceinfo.{{item.Name}}
###        with_items: jsondata

#///some, some kinda jinja templating for inventory

#
#///some, some kinda jinja templating for hostvars, maybe add line to file
#
#


#///////////////////////////////////////////////////////////////////
